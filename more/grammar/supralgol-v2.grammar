<Program> -> begin <Code> end
<Code> -> eps | <InstList>
<InstList> -> <Instruction> <InstList'>
<InstList'> -> eps | ; <InstList>
<Instruction> -> <Assign> | <If> | <While> | <For> | <Print> | <Read>
<Assign> -> [VarName] := <ExprArith> 
<ExprArith'> -> <Op'> <ExprArith> <ExprArith'> | eps
<ExprArith> -> <ExprArith0> <ExprArith'>
<ExprArith0'> -> <Op''> <ExprArith> <ExprArith0'> | eps
<ExprArith0> -> <ExprArith1> <ExprArith0'>
<ExprArith1> -> - <ExprArith> | [VarName] | [Number] | ( <ExprArith> )
<Op'> -> + | -
<Op''> -> * | /
<If> -> if <Cond> then <Code> <If'>
<If'> -> fi | else <Code> fi
<Cond'> -> <BinOp'> <Cond> <Cond'> | eps
<Cond> -> <Cond0> <Cond'>
<Cond0'> -> <BinOp''> <Cond> <Cond0'> | eps
<Cond0> -> <Cond1> <Cond0'>
<Cond1> -> not <SimpleCond> | <SimpleCond>
<SimpleCond> -> <ExprArith> <Comp> <ExprArith>
<BinOp'> -> and
<BinOp''> -> or
<Comp> -> = | >= | > | <= | < | /=
<While> -> while <Cond> do <Code> od
<For> -> for [VarName] from <ExprArith> by <ExprArith> to <ExprArith> do <Code> od
<Print> -> print ( [VarName] )
<Read> -> read ( [VarName] )